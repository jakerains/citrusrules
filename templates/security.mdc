---
name: SecurityStandards
type: Auto Attached
description: Implement comprehensive security measures including input validation, authentication, authorization, data protection, and threat prevention across all code implementations
glob: **/*.{js,ts,tsx,jsx,py,java,go,rb,php,sql,json,yml,yaml}
priority: critical
---

# Security Standards

Implement security-first development practices with comprehensive threat protection, input validation, secure authentication, and data protection. This rule ensures all code follows security best practices and prevents common vulnerabilities.

## Security-First Development Process

For every feature implementation, I will:

1. **Threat Assessment**: Identify potential security risks and attack vectors
2. **Input Analysis**: Catalog all user inputs and data sources requiring validation
3. **Authentication Review**: Ensure proper authentication and authorization controls
4. **Data Protection**: Implement encryption, sanitization, and secure data handling
5. **Security Testing**: Validate security measures and test for vulnerabilities
6. **Monitoring Setup**: Implement security logging and monitoring

## Core Security Implementation Patterns

### 1. Comprehensive Input Validation Template

Use this pattern for all user input handling:

```typescript
import { z } from 'zod';
import DOMPurify from 'dompurify';
import rateLimit from 'express-rate-limit';

// Schema-based validation with security constraints
const SecureUserInputSchema = z.object({
  email: z.string()
    .email('Invalid email format')
    .max(254, 'Email too long')
    .refine(email => !email.includes('<'), 'Invalid characters in email'),
  
  password: z.string()
    .min(12, 'Password must be at least 12 characters')
    .max(128, 'Password too long')
    .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]/, 
           'Password must contain uppercase, lowercase, number, and special character'),
  
  name: z.string()
    .min(1, 'Name is required')
    .max(100, 'Name too long')
    .regex(/^[a-zA-Z\s\-'\.]+$/, 'Name contains invalid characters'),
  
  content: z.string()
    .max(5000, 'Content too long')
    .transform(content => DOMPurify.sanitize(content))
});

class SecureInputValidator {
  // Rate limiting middleware
  static createRateLimit(windowMs: number, max: number) {
    return rateLimit({
      windowMs,
      max,
      message: { error: 'Too many requests, please try again later' },
      standardHeaders: true,
      legacyHeaders: false,
      handler: (req, res) => {
        this.logSecurityEvent('rate_limit_exceeded', {
          ip: req.ip,
          userAgent: req.get('User-Agent'),
          endpoint: req.originalUrl
        });
        res.status(429).json({ error: 'Rate limit exceeded' });
      }
    });
  }

  // Comprehensive input validation
  static async validateInput<T>(
    schema: z.ZodSchema<T>,
    input: unknown,
    context: string
  ): Promise<T> {
    try {
      // Pre-validation security checks
      this.performSecurityChecks(input, context);
      
      // Schema validation
      const result = await schema.parseAsync(input);
      
      // Post-validation security verification
      this.verifySecurityConstraints(result, context);
      
      return result;
    } catch (error) {
      this.logSecurityEvent('input_validation_failed', {
        context,
        error: error.message,
        input: this.sanitizeForLogging(input)
      });
      throw new ValidationError('Invalid input provided');
    }
  }

  private static performSecurityChecks(input: unknown, context: string): void {
    const inputStr = JSON.stringify(input);
    
    // Check for common injection patterns
    const dangerousPatterns = [
      /<script/i,
      /javascript:/i,
      /on\w+\s*=/i,
      /union\s+select/i,
      /drop\s+table/i,
      /exec\s*\(/i,
      /eval\s*\(/i
    ];

    for (const pattern of dangerousPatterns) {
      if (pattern.test(inputStr)) {
        this.logSecurityEvent('malicious_input_detected', {
          context,
          pattern: pattern.source,
          input: this.sanitizeForLogging(input)
        });
        throw new SecurityError('Potentially malicious input detected');
      }
    }
  }

  private static verifySecurityConstraints<T>(result: T, context: string): void {
    // Additional security checks on validated data
    if (typeof result === 'object' && result !== null) {
      const resultStr = JSON.stringify(result);
      
      // Check for suspicious patterns in validated data
      if (resultStr.length > 100000) {
        throw new SecurityError('Input exceeds maximum size limits');
      }
    }
  }

  private static sanitizeForLogging(input: unknown): string {
    const inputStr = JSON.stringify(input);
    // Remove potentially sensitive data for logging
    return inputStr
      .replace(/("password":\s*")[^"]*"/gi, '$1[REDACTED]"')
      .replace(/("token":\s*")[^"]*"/gi, '$1[REDACTED]"')
      .replace(/("secret":\s*")[^"]*"/gi, '$1[REDACTED]"')
      .substring(0, 500); // Limit log size
  }

  private static logSecurityEvent(event: string, details: Record<string, any>): void {
    console.warn('SECURITY_EVENT', {
      timestamp: new Date().toISOString(),
      event,
      ...details
    });
  }
}
```

### 2. Secure Authentication & Authorization Template

Implement this pattern for all authentication systems:

```typescript
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import { randomBytes, timingSafeEqual } from 'crypto';

class SecureAuthenticationService {
  private readonly SALT_ROUNDS = 12;
  private readonly TOKEN_EXPIRY = '15m';
  private readonly REFRESH_TOKEN_EXPIRY = '7d';
  private readonly MAX_LOGIN_ATTEMPTS = 5;
  private readonly LOCKOUT_DURATION = 15 * 60 * 1000; // 15 minutes

  // Secure password hashing
  async hashPassword(password: string): Promise<string> {
    // Validate password complexity
    if (!this.isPasswordSecure(password)) {
      throw new SecurityError('Password does not meet security requirements');
    }

    return bcrypt.hash(password, this.SALT_ROUNDS);
  }

  // Secure password verification with timing attack protection
  async verifyPassword(password: string, hashedPassword: string): Promise<boolean> {
    try {
      return await bcrypt.compare(password, hashedPassword);
    } catch (error) {
      // Log potential hash tampering
      this.logSecurityEvent('password_verification_failed', {
        error: error.message
      });
      return false;
    }
  }

  // Secure login with brute force protection
  async authenticateUser(email: string, password: string, clientIP: string): Promise<AuthResult> {
    // Check for brute force attempts
    await this.checkBruteForceProtection(email, clientIP);

    try {
      // Find user with secure query
      const user = await this.findUserSecurely(email);
      
      if (!user) {
        await this.recordFailedAttempt(email, clientIP);
        // Use timing-safe comparison to prevent user enumeration
        await this.simulatePasswordCheck();
        throw new AuthenticationError('Invalid credentials');
      }

      // Verify password
      const isPasswordValid = await this.verifyPassword(password, user.hashedPassword);
      
      if (!isPasswordValid) {
        await this.recordFailedAttempt(email, clientIP);
        throw new AuthenticationError('Invalid credentials');
      }

      // Reset failed attempts on successful login
      await this.resetFailedAttempts(email, clientIP);

      // Generate secure tokens
      const tokens = await this.generateSecureTokens(user);
      
      // Log successful authentication
      this.logSecurityEvent('user_authenticated', {
        userId: user.id,
        email: user.email,
        clientIP
      });

      return {
        user: this.sanitizeUserData(user),
        ...tokens
      };
    } catch (error) {
      this.logSecurityEvent('authentication_failed', {
        email,
        clientIP,
        error: error.message
      });
      throw error;
    }
  }

  // Secure token generation
  private async generateSecureTokens(user: User): Promise<TokenPair> {
    const jwtSecret = process.env.JWT_SECRET;
    const refreshSecret = process.env.REFRESH_TOKEN_SECRET;
    
    if (!jwtSecret || !refreshSecret) {
      throw new SecurityError('JWT secrets not configured');
    }

    const tokenPayload = {
      userId: user.id,
      email: user.email,
      roles: user.roles,
      tokenId: randomBytes(16).toString('hex') // Unique token ID for revocation
    };

    const accessToken = jwt.sign(tokenPayload, jwtSecret, {
      expiresIn: this.TOKEN_EXPIRY,
      issuer: 'your-app',
      audience: 'your-app-users'
    });

    const refreshToken = jwt.sign(
      { userId: user.id, tokenId: tokenPayload.tokenId },
      refreshSecret,
      { expiresIn: this.REFRESH_TOKEN_EXPIRY }
    );

    // Store refresh token securely
    await this.storeRefreshToken(user.id, tokenPayload.tokenId, refreshToken);

    return { accessToken, refreshToken };
  }

  // Secure authorization check
  async authorizeAction(
    token: string,
    requiredPermissions: string[],
    resource?: string
  ): Promise<AuthorizedUser> {
    try {
      // Verify token
      const decoded = jwt.verify(token, process.env.JWT_SECRET!) as JWTPayload;
      
      // Check if token is revoked
      if (await this.isTokenRevoked(decoded.tokenId)) {
        throw new AuthorizationError('Token has been revoked');
      }

      // Get current user with permissions
      const user = await this.getUserWithPermissions(decoded.userId);
      
      if (!user) {
        throw new AuthorizationError('User not found');
      }

      // Check permissions
      const hasPermission = this.checkPermissions(
        user.permissions,
        requiredPermissions,
        resource
      );

      if (!hasPermission) {
        this.logSecurityEvent('authorization_failed', {
          userId: user.id,
          requiredPermissions,
          resource
        });
        throw new AuthorizationError('Insufficient permissions');
      }

      return user;
    } catch (error) {
      if (error instanceof jwt.JsonWebTokenError) {
        throw new AuthorizationError('Invalid token');
      }
      throw error;
    }
  }

  private isPasswordSecure(password: string): boolean {
    return (
      password.length >= 12 &&
      /[a-z]/.test(password) &&
      /[A-Z]/.test(password) &&
      /\d/.test(password) &&
      /[@$!%*?&]/.test(password)
    );
  }

  private async simulatePasswordCheck(): Promise<void> {
    // Simulate bcrypt timing to prevent user enumeration
    await bcrypt.hash('fake-password', this.SALT_ROUNDS);
  }

  private async checkBruteForceProtection(email: string, clientIP: string): Promise<void> {
    const attempts = await this.getFailedAttempts(email, clientIP);
    
    if (attempts >= this.MAX_LOGIN_ATTEMPTS) {
      const lockoutTime = await this.getLockoutTime(email, clientIP);
      if (Date.now() - lockoutTime < this.LOCKOUT_DURATION) {
        throw new SecurityError('Account temporarily locked due to multiple failed attempts');
      }
    }
  }

  private checkPermissions(
    userPermissions: string[],
    requiredPermissions: string[],
    resource?: string
  ): boolean {
    return requiredPermissions.every(permission => {
      const resourceSpecificPermission = resource 
        ? `${permission}:${resource}`
        : permission;
      
      return userPermissions.includes(permission) ||
             userPermissions.includes(resourceSpecificPermission) ||
             userPermissions.includes('admin'); // Admin has all permissions
    });
  }

  private sanitizeUserData(user: User): SafeUser {
    const { hashedPassword, ...safeUser } = user;
    return safeUser;
  }
}
```

### 3. Secure Database Interaction Template

Use parameterized queries and secure data access:

```typescript
import { Pool } from 'pg';
import { z } from 'zod';

class SecureDatabaseService {
  private pool: Pool;

  constructor() {
    this.pool = new Pool({
      connectionString: process.env.DATABASE_URL,
      ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: true } : false,
      max: 20, // Connection pool limit
      idleTimeoutMillis: 30000,
      connectionTimeoutMillis: 10000,
    });

    // Enable query logging for security monitoring
    this.pool.on('error', (err) => {
      this.logSecurityEvent('database_connection_error', {
        error: err.message
      });
    });
  }

  // Secure parameterized query execution
  async executeSecureQuery<T>(
    query: string,
    params: any[] = [],
    context: string
  ): Promise<T[]> {
    const client = await this.pool.connect();
    
    try {
      // Validate query for dangerous operations
      this.validateQuery(query, context);
      
      // Log query execution for security monitoring
      this.logSecurityEvent('database_query_executed', {
        context,
        query: this.sanitizeQueryForLogging(query),
        paramCount: params.length
      });

      const result = await client.query(query, params);
      return result.rows;
    } catch (error) {
      this.logSecurityEvent('database_query_failed', {
        context,
        error: error.message,
        query: this.sanitizeQueryForLogging(query)
      });
      throw new DatabaseError('Database operation failed');
    } finally {
      client.release();
    }
  }

  // Secure user data retrieval
  async findUserSecurely(email: string): Promise<User | null> {
    const UserSchema = z.object({
      id: z.string().uuid(),
      email: z.string().email(),
      hashedPassword: z.string(),
      roles: z.array(z.string()),
      isActive: z.boolean(),
      lastLoginAt: z.date().nullable()
    });

    const query = `
      SELECT id, email, hashed_password, roles, is_active, last_login_at
      FROM users 
      WHERE email = $1 AND is_active = true
      LIMIT 1
    `;

    const results = await this.executeSecureQuery<any>(
      query,
      [email],
      'user_authentication'
    );

    if (results.length === 0) {
      return null;
    }

    try {
      return UserSchema.parse({
        id: results[0].id,
        email: results[0].email,
        hashedPassword: results[0].hashed_password,
        roles: results[0].roles || [],
        isActive: results[0].is_active,
        lastLoginAt: results[0].last_login_at
      });
    } catch (error) {
      this.logSecurityEvent('user_data_validation_failed', {
        email,
        error: error.message
      });
      throw new SecurityError('Invalid user data structure');
    }
  }

  // Secure data insertion with transaction
  async createUserSecurely(userData: CreateUserData): Promise<User> {
    const client = await this.pool.connect();
    
    try {
      await client.query('BEGIN');

      // Check for existing user
      const existingUser = await this.findUserSecurely(userData.email);
      if (existingUser) {
        throw new ValidationError('User already exists');
      }

      // Insert user with parameterized query
      const insertQuery = `
        INSERT INTO users (id, email, hashed_password, roles, created_at, updated_at)
        VALUES ($1, $2, $3, $4, NOW(), NOW())
        RETURNING id, email, roles, created_at
      `;

      const userId = randomBytes(16).toString('hex');
      const results = await client.query(insertQuery, [
        userId,
        userData.email,
        userData.hashedPassword,
        userData.roles
      ]);

      await client.query('COMMIT');

      this.logSecurityEvent('user_created', {
        userId,
        email: userData.email
      });

      return results.rows[0];
    } catch (error) {
      await client.query('ROLLBACK');
      throw error;
    } finally {
      client.release();
    }
  }

  private validateQuery(query: string, context: string): void {
    const dangerousPatterns = [
      /;\s*drop\s+/i,
      /;\s*delete\s+from\s+/i,
      /;\s*update\s+.*set\s+/i,
      /union\s+select/i,
      /--\s*$/,
      /\/\*.*\*\//
    ];

    for (const pattern of dangerousPatterns) {
      if (pattern.test(query)) {
        this.logSecurityEvent('dangerous_query_detected', {
          context,
          pattern: pattern.source,
          query: this.sanitizeQueryForLogging(query)
        });
        throw new SecurityError('Potentially dangerous query detected');
      }
    }
  }

  private sanitizeQueryForLogging(query: string): string {
    return query.replace(/\$\d+/g, '[PARAM]').substring(0, 200);
  }

  private logSecurityEvent(event: string, details: Record<string, any>): void {
    console.warn('DATABASE_SECURITY_EVENT', {
      timestamp: new Date().toISOString(),
      event,
      ...details
    });
  }
}
```

### 4. Secure HTTP Headers and CORS Configuration

Implement comprehensive security headers:

```typescript
import helmet from 'helmet';
import cors from 'cors';

class SecurityHeadersMiddleware {
  static configureSecurityHeaders(app: Express) {
    // Helmet for security headers
    app.use(helmet({
      contentSecurityPolicy: {
        directives: {
          defaultSrc: ["'self'"],
          styleSrc: ["'self'", "'unsafe-inline'", "https://fonts.googleapis.com"],
          fontSrc: ["'self'", "https://fonts.gstatic.com"],
          imgSrc: ["'self'", "data:", "https:"],
          scriptSrc: ["'self'"],
          connectSrc: ["'self'"],
          frameSrc: ["'none'"],
          objectSrc: ["'none'"],
          baseUri: ["'self'"],
          formAction: ["'self'"],
          upgradeInsecureRequests: [],
        },
      },
      hsts: {
        maxAge: 31536000,
        includeSubDomains: true,
        preload: true
      },
      noSniff: true,
      xssFilter: true,
      referrerPolicy: { policy: "same-origin" }
    }));

    // CORS configuration
    app.use(cors({
      origin: (origin, callback) => {
        const allowedOrigins = process.env.ALLOWED_ORIGINS?.split(',') || [];
        
        if (!origin || allowedOrigins.includes(origin)) {
          callback(null, true);
        } else {
          callback(new Error('Not allowed by CORS'));
        }
      },
      credentials: true,
      methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
      allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With'],
      maxAge: 86400 // 24 hours
    }));

    // Additional security headers
    app.use((req, res, next) => {
      res.setHeader('X-Content-Type-Options', 'nosniff');
      res.setHeader('X-Frame-Options', 'DENY');
      res.setHeader('X-XSS-Protection', '1; mode=block');
      res.setHeader('Strict-Transport-Security', 'max-age=31536000; includeSubDomains');
      res.setHeader('Permissions-Policy', 'geolocation=(), microphone=(), camera=()');
      next();
    });
  }
}
```

## Security Implementation Checklist

For every feature, ensure:

### Input Security
- [ ] **Schema Validation**: All inputs validated with strict schemas
- [ ] **Sanitization**: HTML content sanitized to prevent XSS
- [ ] **Size Limits**: Input size limits enforced
- [ ] **Pattern Validation**: Dangerous patterns detected and blocked
- [ ] **Rate Limiting**: API endpoints protected from abuse

### Authentication Security
- [ ] **Password Hashing**: Strong hashing (bcrypt/Argon2) with appropriate cost
- [ ] **Secure Tokens**: JWT with proper expiration and signing
- [ ] **Brute Force Protection**: Failed attempt limiting and lockouts
- [ ] **Session Management**: Secure session handling and invalidation
- [ ] **Multi-Factor Support**: Support for additional authentication factors

### Authorization Security
- [ ] **Permission Checks**: Every operation validates user permissions
- [ ] **Resource-Level Access**: Fine-grained access control implemented
- [ ] **Token Validation**: Tokens verified and not revoked
- [ ] **Role-Based Access**: Proper role hierarchy and inheritance
- [ ] **Audit Logging**: All access attempts logged for monitoring

### Data Protection
- [ ] **Encryption**: Sensitive data encrypted at rest and in transit
- [ ] **Secure Storage**: Secrets stored in environment variables
- [ ] **Data Sanitization**: Sensitive data removed from logs
- [ ] **Parameterized Queries**: SQL injection prevention
- [ ] **Error Message Sanitization**: Information leakage prevention

### Network Security
- [ ] **HTTPS Enforcement**: All traffic encrypted
- [ ] **Security Headers**: Comprehensive security headers configured
- [ ] **CORS Policy**: Restrictive cross-origin policies
- [ ] **API Security**: Rate limiting and request validation
- [ ] **Certificate Validation**: Proper SSL/TLS configuration

## Security Anti-Patterns to Avoid

Never implement these dangerous patterns:

```typescript
// ❌ DON'T: SQL injection vulnerability
const getUserQuery = `SELECT * FROM users WHERE email = '${email}'`; // String interpolation

// ❌ DON'T: Plain text password storage
const user = { email, password: password }; // Storing plain text

// ❌ DON'T: Sensitive data in logs
console.log('User login:', { email, password, token }); // Logging secrets

// ❌ DON'T: No input validation
app.post('/api/users', (req, res) => {
  const userData = req.body; // No validation
  createUser(userData);
});

// ❌ DON'T: Weak authorization
const isAuthorized = user.role === 'admin'; // Oversimplified check

// ❌ DON'T: Hardcoded secrets
const JWT_SECRET = 'my-secret-key'; // Hardcoded in code

// ❌ DON'T: Missing error handling
try {
  const result = await riskyOperation();
} catch (error) {
  res.status(500).json({ error: error.message }); // Exposing internal errors
}
```

This rule ensures all implementations follow security-first principles with comprehensive threat protection, secure authentication, and proper data handling.