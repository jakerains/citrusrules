---
description: 
globs: 
alwaysApply: false
---
---
name: ErrorHandlingStandards
type: Auto Attached
description: Enforce comprehensive error handling patterns, custom error types, and robust failure recovery mechanisms across all code implementations
glob: **/*.{js,ts,tsx,jsx,py,java,go,rb,php,swift,kt}
priority: high
---

# Error Handling Standards

Implement robust, typed error handling with proper abstraction levels, meaningful messages, and comprehensive recovery mechanisms. This rule ensures consistent error handling patterns across the entire codebase.

## Core Error Handling Principles

When writing any code, I will:

1. **Fail Fast with Context**: Detect and report errors immediately with rich contextual information
2. **Type-Safe Error Handling**: Use typed errors instead of generic Error objects
3. **Proper Abstraction**: Handle errors at the appropriate level in the application architecture
4. **Never Silence**: Always handle errors explicitly - never swallow them without proper logging/recovery
5. **Graceful Degradation**: Implement fallback mechanisms for critical functionality
6. **User-Friendly Messages**: Provide clear, actionable error messages for users

## Implementation Patterns

### 1. Custom Error Classes Architecture

Always implement a structured error hierarchy:

```typescript
// Base error class with required properties
abstract class AppError extends Error {
  abstract readonly code: string;
  abstract readonly statusCode: number;
  abstract readonly severity: 'low' | 'medium' | 'high' | 'critical';
  
  constructor(
    message: string,
    public readonly context?: Record<string, unknown>,
    public readonly userMessage?: string
  ) {
    super(message);
    this.name = this.constructor.name;
    Error.captureStackTrace(this, this.constructor);
  }

  toJSON() {
    return {
      name: this.name,
      message: this.message,
      code: this.code,
      statusCode: this.statusCode,
      severity: this.severity,
      context: this.context,
      userMessage: this.userMessage
    };
  }
}

// Specific error implementations
class ValidationError extends AppError {
  readonly code = 'VALIDATION_ERROR';
  readonly statusCode = 400;
  readonly severity = 'medium' as const;
}

class NotFoundError extends AppError {
  readonly code = 'NOT_FOUND';
  readonly statusCode = 404;
  readonly severity = 'low' as const;
}

class DatabaseError extends AppError {
  readonly code = 'DATABASE_ERROR';
  readonly statusCode = 500;
  readonly severity = 'high' as const;
}
```

### 2. Service Layer Error Handling Template

Use this pattern for all service methods:

```typescript
class ServiceTemplate {
  async operationWithErrorHandling<T>(
    input: unknown,
    operation: () => Promise<T>
  ): Promise<T> {
    // 1. Input validation
    this.validateInput(input);
    
    try {
      // 2. Execute operation
      const result = await operation();
      
      // 3. Validate result
      if (!result) {
        throw new NotFoundError('Operation returned no result', { input });
      }
      
      return result;
    } catch (error) {
      // 4. Error classification and handling
      if (error instanceof AppError) {
        // Re-throw known errors
        throw error;
      }
      
      // 5. Wrap unknown errors with context
      this.logger.error('Unexpected error in operation', { 
        input, 
        error: error.message,
        stack: error.stack 
      });
      
      throw new DatabaseError(
        'Operation failed due to unexpected error',
        { input, originalError: error.message },
        'We encountered an unexpected issue. Please try again.'
      );
    }
  }

  private validateInput(input: unknown): void {
    if (!input) {
      throw new ValidationError(
        'Input is required',
        { input },
        'Please provide valid input'
      );
    }
  }
}
```

### 3. Async/Await Error Handling Standards

For all async operations, implement:

```typescript
class AsyncErrorHandling {
  async networkRequestWithRetry<T>(
    url: string,
    options: RequestInit = {},
    maxRetries = 3
  ): Promise<T> {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 30000);

    let lastError: Error;

    for (let attempt = 0; attempt <= maxRetries; attempt++) {
      try {
        const response = await fetch(url, {
          ...options,
          signal: controller.signal
        });

        clearTimeout(timeoutId);

        if (!response.ok) {
          const errorData = await this.parseErrorResponse(response);
          
          // Don't retry client errors (4xx)
          if (response.status >= 400 && response.status < 500) {
            throw new ValidationError(
              `Client error: ${response.status}`,
              { url, status: response.status, errorData }
            );
          }
          
          // Retry server errors (5xx) if attempts remain
          if (attempt < maxRetries) {
            await this.exponentialBackoff(attempt);
            continue;
          }
          
          throw new NetworkError(
            `Server error after ${maxRetries} retries`,
            { url, status: response.status, attempts: attempt + 1 }
          );
        }

        return await response.json();
      } catch (error) {
        clearTimeout(timeoutId);
        lastError = error;
        
        if (error.name === 'AbortError') {
          throw new TimeoutError('Request timeout', { url, timeout: 30000 });
        }
        
        if (error instanceof AppError) {
          throw error;
        }
        
        // Retry network errors if attempts remain
        if (attempt < maxRetries && this.isNetworkError(error)) {
          await this.exponentialBackoff(attempt);
          continue;
        }
      }
    }

    throw new NetworkError(
      `Network request failed after ${maxRetries} retries`,
      { url, attempts: maxRetries + 1, lastError: lastError?.message }
    );
  }

  private async exponentialBackoff(attempt: number): Promise<void> {
    const delay = Math.min(1000 * Math.pow(2, attempt), 10000);
    await new Promise(resolve => setTimeout(resolve, delay));
  }

  private isNetworkError(error: any): boolean {
    return error.name === 'TypeError' || 
           error.code === 'NETWORK_ERROR' ||
           error.message.includes('fetch');
  }

  private async parseErrorResponse(response: Response): Promise<any> {
    try {
      return await response.json();
    } catch {
      return { message: response.statusText };
    }
  }
}
```

### 4. React Error Boundary Implementation

Always implement error boundaries for React applications:

```typescript
interface ErrorBoundaryProps {
  fallback?: React.ComponentType<{ error: Error; resetError: () => void }>;
  onError?: (error: Error, errorInfo: React.ErrorInfo) => void;
  children: React.ReactNode;
}

interface ErrorBoundaryState {
  hasError: boolean;
  error?: Error;
}

class ErrorBoundary extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {
  constructor(props: ErrorBoundaryProps) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error: Error): ErrorBoundaryState {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    // Log error with full context
    console.error('Error Boundary caught an error:', error, errorInfo);
    
    // Report to error monitoring service
    if (this.props.onError) {
      this.props.onError(error, errorInfo);
    }
  }

  resetError = () => {
    this.setState({ hasError: false, error: undefined });
  };

  render() {
    if (this.state.hasError) {
      const FallbackComponent = this.props.fallback || DefaultErrorFallback;
      return (
        <FallbackComponent 
          error={this.state.error!} 
          resetError={this.resetError} 
        />
      );
    }

    return this.props.children;
  }
}

const DefaultErrorFallback: React.FC<{ error: Error; resetError: () => void }> = ({ 
  error, 
  resetError 
}) => (
  <div className="error-boundary-fallback">
    <h2>Something went wrong</h2>
    <details>
      <summary>Error details</summary>
      <pre>{error.message}</pre>
    </details>
    <button onClick={resetError}>Try again</button>
  </div>
);
```

## Error Handling Checklist

When implementing any feature, ensure:

- [ ] **Input Validation**: All inputs are validated with specific error messages
- [ ] **Try-Catch Blocks**: All async operations are wrapped in try-catch
- [ ] **Error Classification**: Errors are properly typed and classified
- [ ] **Context Preservation**: Errors include relevant context for debugging
- [ ] **User Messages**: User-facing errors have friendly, actionable messages
- [ ] **Logging**: Errors are logged with sufficient detail for debugging
- [ ] **Recovery Mechanisms**: Critical paths have fallback options
- [ ] **Timeout Handling**: Network requests have appropriate timeouts
- [ ] **Retry Logic**: Transient failures are handled with retry mechanisms
- [ ] **Error Boundaries**: React components are wrapped in error boundaries

## Anti-Patterns to Avoid

Never implement these patterns:

```typescript
// ❌ DON'T: Silent failure
try {
  await riskyOperation();
} catch {
  // Silent failure - never do this
}

// ❌ DON'T: Generic error handling
catch (error) {
  throw new Error('Something went wrong');
}

// ❌ DON'T: Swallowing errors in loops
for (const item of items) {
  try {
    await processItem(item);
  } catch {
    continue; // Losing error information
  }
}

// ❌ DON'T: No input validation
async function updateUser(data) {
  return await database.update(data); // No validation
}
```

## Error Monitoring Integration

Always include error monitoring setup:

```typescript
// Error reporting service integration
class ErrorReporter {
  static captureException(error: Error, context?: Record<string, unknown>) {
    // Integration with Sentry, Bugsnag, etc.
    if (error instanceof AppError) {
      errorService.captureException(error, {
        tags: { 
          errorCode: error.code,
          severity: error.severity 
        },
        extra: {
          context: error.context,
          userMessage: error.userMessage,
          ...context
        }
      });
    } else {
      errorService.captureException(error, { extra: context });
    }
  }
}
```

This rule ensures all error handling follows consistent, robust patterns with proper typing, context preservation, and recovery mechanisms.